kind: Workflow
metadata:
  generateName: builder
spec:
  entrypoint: schedule-framework-builds
  volumes:
  - name: volv
    persistentVolumeClaim:
      claimName: res-volume
  imagePullSecrets:
  - name: regcred2
  arguments:
    parameters:
    - name: buildmap
      value: |
        [
        // json list of architectures
        ]
    - name: algomap
      value: |
        [
        {
            "algo": "compare",
            "keylen": 128
        }
        ]
  templates:
  - name: schedule-framework-builds
    inputs:
      parameters:
      - name: buildmap
      - name: algomap
    parallelism: 5
    steps:
    - - name: getmapartifact
        template: getmapartifact
        arguments:
          parameters:
            - name: algomap
              value: "{{inputs.parameters.algomap}}"
    - - name: schedule-build
        template: schedule-build
        continueOn:
          failed: true
        arguments:
          parameters:
          - name: toolchain
            value: "{{item.toolchain}}"
          - name: framework
            value: "{{item.framework}}"
          - name: commit
            value: "{{item.commit}}"
          - name: optlvl
            value: "{{item.optlvl}}"
          - name: compiler
            value: "{{item.compiler}}"
        withParam: "{{inputs.parameters.buildmap}}"
    - - name: reduce-global
        template: reduce-global
  
  
  - name: schedule-build
    inputs:
      parameters:
      - name: toolchain
      - name: framework
      - name: commit
      - name: optlvl
      - name: compiler
    parallelism: 5
    steps:
    - - name: schedule
        template: build
        continueOn:
          failed: true
        arguments:
          parameters:
          - name: toolchain
            value: "{{inputs.parameters.toolchain}}"
          - name: framework
            value: "{{inputs.parameters.framework}}"
          - name: commit
            value: "{{inputs.parameters.commit}}"
          - name: optlvl
            value: "{{inputs.parameters.optlvl}}"
          - name: compiler
            value: "{{inputs.parameters.compiler}}"

  - name: build
    retryStrategy:
        limit: "3"
        backoff:
            duration: "3m"      
            factor: "2"
            maxDuration: "10m" 
      
    inputs:
      parameters:
      - name: toolchain
      - name: framework
      - name: commit
      - name: optlvl
      - name: compiler
    container:
      image: jumpst3r/builder:eval
      imagePullPolicy: Always
      # image: docker.io/library/builder2
      volumeMounts:
      - name: volv
        mountPath: /mnt/vol
      command:
        - bash
        - -c
      args: 
        - >-
            ls /mnt/vol/*.json && cp /mnt/vol/algomap.json /build/algomap.json && python3 builder.py {{inputs.parameters.toolchain}} {{inputs.parameters.framework}} {{inputs.parameters.commit}} {{inputs.parameters.optlvl}} {{inputs.parameters.compiler}}
  - name: reduce-global
    retryStrategy:
        limit: "3"
        backoff:
            duration: "3m"      
            factor: "2"
            maxDuration: "10m"
    script:
      image: python:alpine3.6
      volumeMounts:
      - name: volv
        mountPath: /mnt/vol
      command: [python]
      source: |
        import glob
        import json
        jlist = glob.glob('/mnt/vol/*.json')
        print("jsonlist:")
        print(jlist)
        final = []
        for r in jlist:
          if '*' not in r:
            continue
          with open(r, 'r') as f:
            res = json.load(f)
          canonicalName = r.split('/')[-1]
          jsondict = {}
          jsondict['toolchain'] = canonicalName.split('*')[0]
          jsondict['framework'] = canonicalName.split('*')[1]
          jsondict['commit'] = canonicalName.split('*')[2]
          jsondict['optlvl'] = canonicalName.split('*')[3]
          jsondict['compiler'] = canonicalName.split('*')[4]
          jsondict['results'] = res
          final.append(res)
        with open('/mnt/vol/finalres.json', 'w') as f: 
          json.dump(final, f)
        
    outputs:
      artifacts:
      - name: results
        path: /mnt/vol/finalres.json
  


  - name: getmapartifact
    inputs:
      parameters:
      - name: algomap
    script:
      image: python:alpine3.6
      volumeMounts:
      - name: volv
        mountPath: /mnt/vol
      command: [python]
      source: |
        import json
        import os
        import glob
        import time
        files = glob.glob('/mnt/vol/*')
        print(files)
        algomap = r'''{{inputs.parameters.algomap}}'''
        #algomap = algomap.replace('\\"', '|')
        #algomap = algomap.replace('"', '')
        #algomap = algomap.replace('|', '"')
        print(algomap)
        with open('/mnt/vol/algomap.json', 'w') as f:
          f.write(algomap)
        time.sleep(5)
        files = glob.glob('/mnt/vol/*')
        print(files)

      
